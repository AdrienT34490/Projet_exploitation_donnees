#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import re
import matplotlib.pyplot as plt
from matplotlib import cm
import Intensite

#----------Récupération des colonnes----------#

# le numéro des colonnes est donné de manière "naturelle",
# on soustrait donc 1 au nombre donné pour avoir l'index.
parameterColumn = int(sys.argv[5]) - 1
variableColumn = [int(sys.argv[6]) - 1]

#----------Récupération des paramètres----------#

# On récupère le début et la fin de l'intervalle à grapher donné par l'utilisateur.
# Si startInterval < ExtractedData[colonne1][0] ou si l'utilisateur a demandé une valeur par défaut,
# on pose endInterval = ExtractedData[0][0]
# Même chose pour endInterval.
intervalStart, intervalEnd = sys.argv[4].split(";")
intervalStart = intervalStart.strip()
intervalEnd = intervalEnd.strip()

if re.search("(d[ée]faul?t|none)", intervalStart.lower()):
    intervalStart = Intensite.Data[parameterColumn][0]
else:
    intervalStart = Intensite.traitementValeur(intervalStart)
if re.search("(d[ée]faul?t|none)", intervalEnd.lower()):
    intervalEnd = Intensite.Data[parameterColumn][-1]
else:
    intervalEnd = Intensite.traitementValeur(intervalEnd)

# Dans le cas où l'utilisateur ait mis une fin plus petite que le début par erreur,
# on inverse les valeurs.
if intervalStart >= intervalEnd:
    intervalStart, intervalEnd = intervalEnd, intervalStart

#----------Génération des listes pour le plot----------#

def ploting(intervalStart, intervalEnd, DataTable, parameterColumn, variableColumn):
    # Valeur qui sera retournée
    PlotTable = []
    # On récupère la colonne qui contient les paramètres
    parameterList = DataTable[parameterColumn]
    # On transpose la table, de cette manière, on peut sélectionner les lignes qui nous intéressent
    DataTable = Intensite.transposition(DataTable)
    for value in parameterList:
        if intervalStart <= value <= intervalEnd:
            lineNumber = parameterList.index(value)
            PlotTable = PlotTable + [DataTable[lineNumber]]
    # On transpose à nouveau
    PlotTable = Intensite.transposition(PlotTable)


    # Définition des couleurs
    colors = []
    for index in range(0, len(PlotTable)):
        colors = colors + [cm.cool(index/len(PlotTable))]

    # Création du graphique contenant toutes les colonnes graphée en fonction de la colonne paramètre
    ListX = PlotTable[parameterColumn]
    fig, ax = plt.subplots()
    for column in variableColumn:
        ListY = PlotTable[column]
        ax.plot(ListX, ListY, color=colors[column], label=f"Colonne N°{column+1}")

    ax.grid(True)
    ax.set_xlabel("Paramètre")
    ax.set_ylabel("Variable")
    ax.set_title(f"Graphique allant de {ListX[0]:.2f} à {ListX[-1]:.2f}")
    ax.legend()
    ax.set_aspect(1.0/ax.get_data_ratio(), adjustable='box')
    plt.show()

ploting(intervalStart, intervalEnd, Intensite.Data, parameterColumn, [1, 2, 3, 4, 5, 6])