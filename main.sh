clear
# Décoration :
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[0;37m'
RESET='\033[0m'

# Gestion des options

# Aide les utilisateurs à savoir quoi mettre dans quel paramètres
Help()
{
  echo -e ""
  echo -e "${RED}-----Documentation-----${RESET}"
  echo -e "${MAGENTA}- Paramètre 1 :${RESET} Chemin (absolu ou relatif) du fichier à traiter. Chaque ligne doit se terminer par un retour
  à la ligne. Le fichier doit être au format csv ou txt${RESET}"
  echo -e "${MAGENTA}- Paramètre 2 :${RESET} le séparateur, c'est la chaîne de caractère qui se trouve entre deux valeurs numériques.
  Si c'est un espace ou une tabulation saisir défaut${RESET}"
  echo -e "${MAGENTA}- Paramètre 3 :${RESET} Taille des fenêtres c'est-à-dire la sosutraction entre la fin et le début de la fenêtre. Saisir
  défaut revient a choisir une taille de 10${RESET}"
  echo -e "${MAGENTA}- Paramètre 4 :${RESET} numéro de la colonne qui sera utilisé pour les fenêtre${RESET}"
  echo -e "${MAGENTA}- Paramètre 5 :${RESET} numéro de la colonne qui sera fenêtrée${RESET}"
  echo -e "${MAGENTA}- Paramètre 6 :${RESET} début de l'intervalle de la colonne 1 que vous voulez grapher${RESET}"
  echo -e "${MAGENTA}- Paramètre 7 :${RESET} fin de l'intervalle de la colonne 1 que vous voulez grapher${RESET}"
  echo -e ""
}

# Description du programme. Permet de donner des informations sur le programme à l'utilisateur
Desc()
{
  echo ""
  echo -e "${RED}-----Guide d'utilisation-----${RESET}"
  echo "Ce programme permet de faire deux choses distinctes :"
  echo "- Il va lire un fichier sous forme de tableau et créer un dictionnaire qui a pour : "
  echo "  - clef : un intervalle d'une taille spécifié d'une colonne (colonne1) du tableau spécifié.
  Cet intervalle a une forme du type début-fin"
  echo "  - valeur : les valeurs d'une autre colonne (colonne2) associées aux valeurs de cet intervalle"
  echo "- Il va aussi produire un graphique de la colonne2 en fonction de la colonne1 dans un intervalle que vous aurez
  choisi."
  echo ""
}

# Cette fonction permet de tester si un fichier n'est pas vide grâce à un grep et une expression régulière.
# L'expression régulière ".*" regarde si il y a n'importe quelle répétition de n'importe quel caractère.
# Si il y n'y a aucune répétion de n'importe quel caractère la fonction renvoie 0. Sinon elle renvoie 1
# On fait ça pour avoir un "booléen" étant donné que ce type de valeur n'existe pas.
testVide()
{
  local fichier=$1
  resultat=$(grep ".*" "$fichier")
  [ "$resultat" == "" ]
}

# Cette fonction permet de tester si le paramètre donné à la fonction est un nombre.
# étant donné qu'il n'est pas possible de tester qu'un paramètre soit un chiffre de manière directe
# on utilise une expression régulière
# Pour tester si un string correspond à une certaine expression régulière on utilise la structure if [[ =~ ]]
# L'expression régulière se traduit de la manière suivante :
#   ^[+-]? : la chaîne peut commencer par + ou - ou rien
#   [0-9]+ : elle est suivie de n'importe quelle répétition des chiffres entre 0 et 9
#   [.,]? : elle peut être suivie de . ou , ou rien
#   [0-9]*$ : elle peut se terminer par n'importe quelle répétition des chiffres entre à et 9 ou rien
testNombre()
{
  local valeur=$1
  [[ "$valeur" =~ ^[+-]?[0-9]+[.,]?[0-9]*$ ]]
}

# Cette fonction permet de tester si le paramètre donné à la fonction est un entier positif.
# On utilise une méthode similaire à la précédente
# Pour tester si un string correspond à une certaine expression régulière on utilise la structure if [[ =~ ]]
# L'expression régulière se traduit de la manière suivante :
#   ^[+]? : la chaîne peut commencer par + ou rien
#   [0-9]+ : elle est suivie de n'importe quelle répétition des chiffres entre 0 et 9
testEntier()
{
  local valeur=$1
  [[ "$valeur" =~ ^[+]?[0-9]+$ ]]
}

# Cette fonction permet de tester si un fichier est un csv ou un txt
testExt()
{
  local valeur=$1
  [[ "$valeur" =~ ^.*\.txt$|^.*\.csv$ ]]
}
# Coeur du programme

# On commence par traiter les options qu'on veut ajouter.
# L'instruction getopts en conjonction avec case permet de tester si les options donnée sont valide :
#   Si il y a l'option d, getopts renvoie d et execute la fonction desc
#   Si il y a l'option h, getopts renvoie h et execute la fonction help.
#   Si il y a tout autre options donné, getopts renvoie * et quitte le programme avec un message d'erreur,
while getopts ":dh" options; do
  case $options in
    h)
      Help
      ;;
    d)
      Desc
      ;;
    *)
      echo "Erreur : option invalide"
      exit;;
  esac
done


# L'utilisateur entre tout les paramètres un à un avec une explication brève
echo "Vous allez entrer les paramètres pour la création du dictionnaire
(executez main.sh avec l'option -h pour plus d'information)"
read -p "Chemin du fichier : " path

if ! [ -e "$path" ]; then
  echo -e "${RED}Le fichier n'existe pas.
Si vous avez cette erreur c'est peut être parce que le fichier n'est pas dans le même dossier que main.sh${RESET}"
  exit
fi

if ! testExt "$path"; then
  echo -e "${RED}Le fichier que vous avez fournit n'est pas au format .csv ou .txt${RESET}"
  exit
fi

if testVide "$path"; then
  echo -e "${YELLOW}Le fichier que vous avez fournit est vide, il n'a pas été traité${RESET}"
  exit
fi

echo "Le séparateur : "
echo "  - défaut si le séparateur est un espace vide"
read -p "Séparateur : " separateur
read -p "Taille des fenêtre : " taille


if testNombre "$taille"; then
  echo -e "${RED}La taille que vous avez fournit n'est pas un nombre${RESET}"
  exit
fi

echo ""
echo "Vous vous apprêtez à saisir les deux colonnes concernée (exécutez main.sh avec l'option -h pour plus
d'information)"
read -p "Numéro de la première colonne concernée : " colonne1


if testEntier "$colonne1"; then
  echo -e "${RED}Le numéro de la première colonne que vous avez fournit n'est pas un entier${RESET}"
  exit
fi

read -p "Numéro de la première colonne concernée : " colonne2


if testEntier "$colonne2"; then
  echo -e "${RED}Le numéro de la deuxième colonne que vous avez fournit n'est pas un entier${RESET}"
  exit
fi

echo ""
echo "Vous vous apprêtez à saisir les paramètres pour le graphique (exécutez main.sh avec l'option -h pour plus
d'information)"
read -p "Début de l'intervalle à grapher : " debut


if testNombre "$debut"; then
  echo -e "${RED}Le début d'intervalle que vous avez fournit n'est pas un nombre${RESET}"
  exit
fi

read -p "Fin de l'intervalle à grapher : " fin


if testNombre "$fin"; then
  echo -e "${RED}La fin d'intervalle que vous avez fournit n'est pas un nombre${RESET}"
  exit
fi

# on exécute le script python après vérification des paramètres
python3 recherche_plot.py "$path" "$separateur" "$taille" "$debut-$fin" "$colonne1" "$colonne2"
python3 recherche_plot_dict.py "$path" "$separateur" "$taille" "$debut-$fin" "$colonne1" "$colonne2"