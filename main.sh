clear
# Décoration :
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[0;37m'
RESET='\033[0m'

#----------Définition des fonction apellée dans les options----------#

# Aide les utilisateurs à savoir quoi mettre dans quel paramètres
DescParamètres()
{
  echo -e ""
  echo -e "${RED}-----Début Description Paramètres-----${RESET}"
  echo -e ""
  echo -e "${MAGENTA}- Paramètre 1 :${RESET}
    - Chemin (absolu ou relatif) du fichier à traiter.
    - Le fichier doit être au format csv ou txt${RESET}"
  echo -e ""
  echo -e "${MAGENTA}- Paramètre 2 :${RESET}
    - le séparateur : c'est la chaîne de caractère qui se trouve entre deux valeurs numériques.
    - Si c'est un espace ou une tabulation saisir ${GREEN}défaut${RESET}"
  echo -e ""
  echo -e "${MAGENTA}- Paramètre 3 :${RESET}
    - Taille des fenêtres c'est-à-dire la sosutraction entre la fin et le début de la fenêtre.
    - Saisir ${GREEN}défaut${RESET} revient a choisir une taille de 10${RESET}"
  echo -e ""
  echo -e "${MAGENTA}- Paramètre 4 :${RESET}
    - numéro de la colonne qui sera utilisé pour les fenêtre${RESET}"
  echo -e ""
  echo -e "${MAGENTA}- Paramètre 5 :${RESET}
    - numéro de la colonne qui sera fenêtrée${RESET}"
  echo -e ""
  echo -e "${MAGENTA}- Paramètre 6 :${RESET}
    - début de l'intervalle de la colonne 1 que vous voulez grapher${RESET}
    - Saisir ${GREEN}défaut${RESET} revient a choisir le début comme étant la plus petite valeur de la ${MAGENTA}colonne1${RESET}"
  echo -e ""
  echo -e "${MAGENTA}- Paramètre 7 :${RESET}
    - fin de l'intervalle de la colonne 1 que vous voulez grapher${RESET}
    - Saisir ${GREEN}défaut${RESET} revient a choisir la fin comme étant la plus grande valeur de la ${MAGENTA}colonne1${RESET}"
  echo -e ""
  echo -e "${RED}-----Fin Description Paramètre-----${RESET}"
  echo -e ""
}

# Description du programme. Permet de donner des informations sur le programme à l'utilisateur
DescProgramme()
{
  echo ""
  echo -e "${RED}-----Début Description Programme-----${RESET}"
  echo ""
  echo -e "Ce programme permet de faire deux choses distinctes :
    - Il va lire un fichier sous forme de tableau et créer un dictionnaire qui a pour :
      - ${CYAN}clef : ${RESET}un intervalle d'une taille spécifié d'une colonne (colonne1) du tableau spécifié.
      Cet intervalle a une forme du type début-fin
      - ${CYAN}valeur : ${RESET}les valeurs d'une autre colonne (colonne2) associées aux valeurs de cet intervalle

    - Il va aussi produire un graphique de la colonne2 en fonction de la colonne1 dans un intervalle que vous aurez choisi."
  echo ""
  echo -e "${RED}-----Fin Description Programme-----${RESET}"
  echo ""
}

#----------Définition des fonction de test----------#

# Cette fonction permet de tester si un fichier n'est pas vide grâce à un grep et une expression régulière.
# L'expression régulière ".*" regarde si il y a n'importe quelle répétition de n'importe quel caractère.
# Si il y n'y a aucune répétion de n'importe quel caractère la fonction renvoie 0. Sinon elle renvoie 1
# On fait ça pour avoir un "booléen" étant donné que ce type de valeur n'existe pas.
testVide()
{
  local fichier=$1
  resultat=$(grep ".*" "$fichier")
  [ "$resultat" == "" ]
}

# Cette fonction permet de tester si le paramètre donné à la fonction est un nombre.
# étant donné qu'il n'est pas possible de tester qu'un paramètre soit un chiffre de manière directe
# on utilise une expression régulière
# Pour tester si un string correspond à une certaine expression régulière on utilise la structure if [[ =~ ]]
# L'expression régulière se traduit de la manière suivante :
#   ^[+-]? : la chaîne peut commencer par + ou - ou rien
#   [0-9]+ : elle est suivie de n'importe quelle répétition des chiffres entre 0 et 9
#   [.,]? : elle peut être suivie de . ou , ou rien
#   [0-9]*$ : elle peut se terminer par n'importe quelle répétition des chiffres entre à et 9 ou rien
testNombre()
{
  local valeur=$1
  [[ "$valeur" =~ ^[+-]?[0-9]+[.,]?[0-9]*$ ]]
}

# Cette fonction permet de tester si le paramètre donné à la fonction est un entier positif.
# On utilise une méthode similaire à la précédente
# Pour tester si un string correspond à une certaine expression régulière on utilise la structure if [[ =~ ]]
# L'expression régulière se traduit de la manière suivante :
#   ^[+]? : la chaîne peut commencer par + ou rien
#   [0-9]+ : elle est suivie de n'importe quelle répétition des chiffres entre 0 et 9
testEntier()
{
  local valeur=$1
  [[ "$valeur" =~ ^[+]?[0-9]+$ ]]
}

# Cette fonction permet de tester si le paramètre donné à la fonction correspond au string none/defaut/défaut/default/défault.
# On utilise une méthode similaire à la précédente
# Pour tester si un string correspond à une certaine expression régulière on utilise la structure if [[ =~ ]]
# L'expression régulière se traduit de la manière suivante :
#   d[ée]faul?t : la valeur peut être "défaut/defaut/défault/default"
#   |none : ou elle peut être "none"
testDefaut()
{
  local valeur=$1
  [[ "$valeur" =~ ^d[ée]faul?t|none$ ]]
}

# Cette fonction permet de tester si le paramètre donné à la fonction se termine par .txt ou .csv
# On utilise une méthode similaire à la précédente
# Pour tester si un string correspond à une certaine expression régulière on utilise la structure if [[ =~ ]]
# L'expression régulière se traduit de la manière suivante :
#   ^.* : la valeur peut commencer par n'importe quelle chiane de caractère
#   \.txt (\.csv)$ : elle se termine par .txt (.csv)
testExt()
{
  local valeur=$1
  [[ "$valeur" =~ ^.*\.txt$|^.*\.csv$ ]]
}

#----------Gestion des options----------#

# On commence par traiter les options qu'on veut ajouter.
# L'instruction getopts en conjonction avec case permet de tester si les options donnée sont valide :
#   Si il y a l'option d, getopts renvoie d et execute la fonction desc
#   Si il y a l'option h, getopts renvoie h et execute la fonction help.
#   Si il y a tout autre options donné, getopts renvoie * et quitte le programme avec un message d'erreur,
while getopts ":dh" options; do
  case $options in
    h)
      DescParamètres
      ;;
    d)
      DescProgramme
      ;;
    *)
      echo "Erreur : option invalide"
      exit;;
  esac
done

#----------Saisie des paramètres----------#

echo ""
echo -e "Vous allez entrer les paramètres pour la création du dictionnaire
${CYAN}(executez main.sh avec l'option -h pour plus d'information sur les paramètres)${RESET}"
echo ""

#----------Saisie du path----------#

echo -e -n "Chemin du fichier (${MAGENTA}path${RESET}) : "
read path

#----------Test du path-----------#

if ! [ -e "$path" ]; then
  echo -e "${RED}Le fichier n'existe pas.
Si vous avez cette erreur c'est peut être parce que le fichier n'est pas dans le même dossier que main.sh${RESET}"
  exit
fi

if ! testExt "$path"; then
  echo -e "${RED}Le fichier que vous avez fournit n'est pas au format .csv ou .txt${RESET}"
  exit
fi

if testVide "$path"; then
  echo -e "${CYAN}Le fichier que vous avez fournit est vide, il n'a pas été traité${RESET}"
  exit
fi

#----------Saisie du spéarateur----------#

echo -e -n "Le séparateur (${MAGENTA}separateur${RESET}) : "
read separateur

#----------Saisie de la taille des fenêtre----------#

echo -e -n "Taille des fenêtre (${MAGENTA}taille${RESET}) : "
read taille

#----------Test Taille----------#

if ! testNombre "$taille" && ! [[ "$taille" =~ d[ée]faul?t|[Nn]one ]]; then
  echo -e "${RED}La taille que vous avez fournit n'est pas un nombre ou la valeur \"défaut\" ${RESET}"
  exit
fi

#----------Saisie des colonnes concernée----------#

echo ""
echo -e "Vous vous allez entrer les deux colonnes concernées.
${CYAN}(executez main.sh avec l'option -h pour plus d'information sur les paramètres)${RESET}"
echo ""

echo -e -n "Numéro de la première colonne concernée (${MAGENTA}colonne1${RESET}) : "
read colonne1

echo -e -n "Numéro de la deuxième colonne concernée (${MAGENTA}colonne2${RESET}) : "
read colonne2

#----------Test des colonnes----------#

if ! testEntier "$colonne2"; then
  echo -e "${RED}Le numéro de la deuxième colonne que vous avez fournit n'est pas un entier${RESET}"
  exit
fi

if ! testEntier "$colonne1"; then
  echo -e "${RED}Le numéro de la première colonne que vous avez fournit n'est pas un entier${RESET}"
  exit
fi

#----------Saisie de l'intervalle-----------#

echo ""
echo -e "Vous vous allez entrer les paramètres pour le graphique
${CYAN}(executez main.sh avec l'option -h pour plus d'information sur les paramètres)${RESET}"
echo ""

echo -e -n "Début de l'intervalle à grapher (${MAGENTA}debut${RESET}) : "
read debut

echo -e -n "Fin de l'intervalle à grapher (${MAGENTA}fin${RESET}) : "
read fin

#----------Test de l'intervalle----------#

if ! testNombre "$debut" && ! testDefaut "$debut"; then
  echo -e "${RED}Le début d'intervalle que vous avez fournit n'est pas un nombre ou la valeur défaut${RESET}"
  exit
fi

if ! testNombre "$fin" && ! testDefaut "$fin"; then
  echo -e "${RED}La fin d'intervalle que vous avez fournit n'est pas un nombre ou la valeur défaut${RESET}"
  exit
fi

#----------Exécution----------#

# on exécute le script python après vérification des paramètres
python3 recherche_plot.py "$path" "$separateur" "$taille" "$debut\_$fin" "$colonne1" "$colonne2"
